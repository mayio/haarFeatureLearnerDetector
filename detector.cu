/*
 *
 *  Created on: May 17, 2017
 *      Author: Mario LÃ¼der
 *
 */

#include <stdio.h>
#include <stdlib.h>


#include "Learner.cuh"
#include "Classifier.cuh"
#include "FeatureTypes.cuh"
#include "FeatureValues.cuh"
#include "Image.cuh"

// load image includes
#include <opencv2/core/core.hpp>
#include <opencv2/core/gpumat.hpp>
#include <opencv2/gpu/gpu.hpp>
#include <opencv2/highgui/highgui.hpp>

#include <cuda_profiler_api.h>

#include "utilities.cuh"
#include "defines.cuh"

/**
 * Host function that prepares data array and passes it to the CUDA kernel.
 */
int main(void)
{
   // Original
   // std::string strongClassifierStr = "[[[[[[[49,22,1]],[[49,22,-1]]],18,0,0.0332471,-90686,1],[[[[12,36,1],[12,36,-1]]],0,12,0.0991827,-9593,1]],[0.0343905,0.110103],2.20634],[[[[[[16,66,1],[16,66,-1]]],57,20,0.108966,29552,-1],[[[[14,16,1]],[[14,16,-1]]],72,64,0.160855,3968,-1],[[[[26,4,1]],[[26,4,-1]]],33,100,0.183328,1901,-1],[[[[29,36,1],[29,36,-1]]],33,8,0.1819,25689,-1],[[[[4,6,1],[4,6,-1]]],84,0,0.169853,44211,1]],[0.122292,0.191689,0.224481,0.222345,0.204606],5.09883],[[[[[[26, 29, 1]], [[26, 29, -1]]], 18, 32, 0.0191388, 34104, 1],[[[[26, 3, 1]], [[26, 3, -1]], [[26, 3, 1]]], 21, 52, 0.0207317, 8115, -1]], [0.0195122, 0.0211706], 6.79186]]";

   //std::string strongClassifierStr = "[[[[[[[49,22,1]],[[49,22,-1]]],18,0,0.0332471,-90686,1],[[[[12,36,1],[12,36,-1]]],0,12,0.0991827,-9593,1]],[0.0343905,0.110103],2.20634],[[[[[[16,66,1],[16,66,-1]]],57,20,0.108966,29552,-1],[[[[14,16,1]],[[14,16,-1]]],72,64,0.160855,3968,-1],[[[[26,4,1]],[[26,4,-1]]],33,100,0.183328,1901,-1],[[[[29,36,1],[29,36,-1]]],33,8,0.1819,25689,-1],[[[[4,6,1],[4,6,-1]]],84,0,0.169853,44211,1]],[0.122292,0.191689,0.224481,0.222345,0.204606],5.09883],[[[[[[26, 29, 1]], [[26, 29, -1]]], 18, 32, 0.0191388, 34104, 1],[[[[26, 3, 1]], [[26, 3, -1]], [[26, 3, 1]]], 21, 52, 0.0207317, 8115, -1]], [0.0195122, 0.0211706], 7.78186]]";
   /*
   [[[[[[[49,22,1]],[[49,22,-1]]],18,0,0.0332471,-90686,1],[[[[22,8,1],[22,8,-1]]],48,104,0.0922494,-38536,1],[[[[8,26,1],[8,26,-1]]],0,20,0.144086,-6474,1],[[[[10,22,1]],[[10,22,-1]],[[10,22,1]]],0,32,0.160434,18853,1],[[[[26,4,1]],[[26,4,-1]]],30,100,0.154933,1657,-1]],
   [0.0343905,0.101624,0.168342,0.191091,0.183338],
   3.35143],
   [[[[[[49,22,1]],[[49,22,-1]]],6,0,0.176727,-40517,1],[[[[12,66,1],[12,66,-1]]],66,24,0.187417,21526,-1],[[[[14,16,1]],[[14,16,-1]]],75,64,0.194728,3836,-1],[[[[12,36,1],[12,36,-1]]],0,56,0.23373,-8190,1],[[[[22,66,1],[22,66,-1]]],39,0,0.228247,21777,-1],[[[[49,6,1]],[[49,6,-1]]],9,0,0.228516,-7595,1],[[[[49,6,1]],[[49,6,-1]]],18,52,0.236501,-3840,1],[[[[26,12,1]],[[26,12,-1]]],0,64,0.225154,2591,-1],[[[[49,3,1]],[[49,3,-1]]],21,48,0.265981,-921,1],[[[[6,3,1]],[[6,3,-1]]],39,104,0.264232,57,-1],[[[[14,3,1]],[[14,3,-1]]],6,104,0.265039,-136,1],[[[[10,22,1]],[[10,22,-1]],[[10,22,1]]],78,36,0.252234,16527,1],[[[[2,6,1],[2,6,-1]]],69,100,0.242955,396,-1]],
   [0.214664,0.230644,0.241816,0.305022,0.295752,0.296203,0.309759,0.290579,0.362362,0.359124,0.360616,0.337317,0.320925],
   7.37621],
   [[[[[[49,4,1]],[[49,4,-1]],[[49,4,1]]],42,0,0.0261283,29220,1],[[[[12,26,1],[12,26,-1],[12,26,1]]],39,32,0.0710643,28378,-1],[[[[2,26,1],[2,26,-1]]],72,12,0.11069,52,-1],[[[[29,36,1],[29,36,-1]]],24,48,0.104579,1347,-1],[[[[8,36,1],[8,36,-1]]],24,20,0.0969391,1184,1]],
   [0.0268293,0.0765008,0.124468,0.116793,0.107345],
   8.33607]
   ]
   */


   /* faces
   std::string strongClassifierStr = std::string() +
         "[[[[[[[49,22,1]],[[49,22,-1]]],18,0,0.0332471,-90686,1],[[[[12,36,1],[12,36,-1]]],0,12,0.0991827,-9593,1],[[[[16,6,1],[16,6,-1]]],57,84,0.148353,2177,-1]]," +
         "[0.0343905,0.110103,0.174196]," +
         "1.74758]," +
         "[[[[[[8,12,1]],[[8,12,-1]]],84,64,0.0523191,-7807,1],[[[[14,16,1]],[[14,16,-1]]],33,12,0.0340082,-27205,1],[[[[22,36,1],[22,36,-1]]],45,12,0.114434,21409,-1],[[[[14,22,1]],[[14,22,-1]]],12,0,0.189615,-7194,1],[[[[26,4,1]],[[26,4,-1]]],30,100,0.165921,1563,-1],[[[[6,12,1]],[[6,12,-1]]],81,88,0.183366,66521,1]]," +
         "[0.0552076,0.0352054,0.129221,0.233982,0.198927,0.224539]," +
         "5.84288]," +
         "[[[[[[12,26,1],[12,26,-1],[12,26,1]]],36,76,0.0178653,22526,-1],[[[[2,10,1],[2,10,-1]]],3,20,0.0707651,-591,1],[[[[12,26,1],[12,26,-1]]],0,72,0.173719,-2579,1],[[[[49,16,1]],[[49,16,-1]]],27,0,0.175738,-24893,1],[[[[10,4,1]],[[10,4,-1]]],72,80,0.21342,181,-1],[[[[29,49,1],[29,49,-1]]],30,56,0.221047,23861,-1],[[[[6,8,1]],[[6,8,-1]],[[6,8,1]]],0,8,0.209865,4279,1],[[[[6,6,1],[6,6,-1]]],12,84,0.220425,-470,1],[[[[6,6,1]],[[6,6,-1]]],6,84,0.210801,-16,-1],[[[[49,6,1]],[[49,6,-1]]],15,96,0.222737,5228,-1],[[[[8,26,1],[8,26,-1]]],60,8,0.230551,914,-1]]," +
         "[0.0181903,0.0761542,0.210242,0.213206,0.271327,0.283774,0.265606,0.282749,0.267108,0.286566,0.299632]," +
         "10.5988]" +
         "]";
   */

   const std::string strongClassifierStr = std::string() +
         "[[[[[[[35,9,1]],[[35,9,-1]]],14,42,0.0694602,-17517,1],[[[[7,9,1],[7,9,-1]]],4,42,0.130259,2110,-1],[[[[6,14,1],[6,14,-1]]],46,40,0.227153,-1138,1],[[[[9,6,1],[9,6,-1],[9,6,1]]],18,20,0.276669,3094,1],[[[[35,9,1]],[[35,9,-1]]],20,4,0.315129,-3120,1],[[[[3,6,1],[3,6,-1]]],22,36,0.310467,53,1],[[[[35,7,1]],[[35,7,-1]]],16,40,0.281405,-14546,1]]," +
         "[0.074645,0.149767,0.293917,0.382493,0.460128,0.450257,0.391604]," +
         "2.0224]," +
         "[[[[[[3,9,1],[3,9,-1]]],24,52,0.177996,-112,-1],[[[[35,2,1]],[[35,2,-1]],[[35,2,1]]],12,42,0.066317,1285,1],[[[[7,11,1],[7,11,-1]]],46,40,0.14554,-2459,1],[[[[11,11,1],[11,11,-1]]],0,40,0.211652,3616,-1],[[[[35,7,1]],[[35,7,-1]]],12,38,0.257059,8633,-1],[[[[22,11,1]],[[22,11,-1]]],22,42,0.218773,-4273,1],[[[[6,7,1],[6,7,-1]]],46,26,0.30283,676,-1],[[[[35,9,1]],[[35,9,-1]],[[35,9,1]]],18,2,0.290086,38001,1],[[[[35,7,1]],[[35,7,-1]]],14,40,0.303754,-13981,1],[[[[3,11,1],[3,11,-1]]],28,46,0.297826,123,1],[[[[6,11,1],[6,11,-1]]],6,32,0.318008,2790,-1],[[[[2,18,1],[2,18,-1]]],26,46,0.30876,81,1],[[[[9,18,1],[9,18,-1]]],42,26,0.289313,6370,-1]]," +
         "[0.216539,0.0710273,0.17033,0.268476,0.346001,0.280038,0.434371,0.40862,0.436275,0.424148,0.466294,0.446675,0.407089]," +
         "6.64819]," +
         "[[[[[[6,9,1],[6,9,-1]]],46,42,0.21449,-284,1],[[[[35,9,1]],[[35,9,-1]]],12,42,0.0931312,-19057,1],[[[[6,14,1],[6,14,-1]]],6,40,0.168582,1648,-1],[[[[9,6,1],[9,6,-1],[9,6,1]]],18,20,0.264597,3103,1],[[[[28,6,1]],[[28,6,-1]]],18,8,0.30934,-1951,1],[[[[7,7,1],[7,7,-1]]],26,46,0.315821,320,1],[[[[35,2,1]],[[35,2,-1]],[[35,2,1]]],16,42,0.281159,1427,1],[[[[2,11,1],[2,11,-1]]],28,44,0.299149,-39,-1],[[[[6,11,1],[6,11,-1]]],44,24,0.268322,1675,-1],[[[[2,7,1],[2,7,-1]]],34,34,0.311686,-25,-1],[[[[7,14,1],[7,14,-1]]],44,32,0.276589,-2952,1],[[[[3,11,1],[3,11,-1]]],30,40,0.32961,-85,-1],[[[[22,7,1]],[[22,7,-1]]],24,40,0.298601,6052,-1],[[[[3,6,1],[3,6,-1]]],20,50,0.307052,-81,-1],[[[[7,7,1]],[[7,7,-1]]],38,40,0.305639,-2265,1],[[[[11,14,1],[11,14,-1]]],0,44,0.317808,788,-1],[[[[9,9,1],[9,9,-1]]],42,32,0.331684,2568,-1],[[[[3,6,1],[3,6,-1]]],22,36,0.324589,62,1],[[[[14,7,1],[14,7,-1]]],34,32,0.316451,-4810,1]]," +
         "[0.273058,0.102695,0.202765,0.359799,0.44789,0.461605,0.391128,0.426837,0.366721,0.452825,0.38234,0.49167,0.425721,0.443111,0.440172,0.465863,0.496298,0.480581,0.462953]," +
         "9.0789]," +
         "[[[[[[11,22,1],[11,22,-1]]],16,42,0.0260485,-6712,-1],[[[[7,7,1],[7,7,-1]]],46,42,0.232103,-2538,1],[[[[6,18,1],[6,18,-1]]],22,16,0.246796,-142,1],[[[[2,9,1],[2,9,-1]]],34,44,0.274758,34,1],[[[[14,2,1]],[[14,2,-1]],[[14,2,1]]],36,40,0.227411,567,1],[[[[2,22,1],[2,22,-1]]],2,40,0.28518,-33,-1],[[[[9,7,1]],[[9,7,-1]]],44,44,0.272131,-2375,1],[[[[14,4,1]],[[14,4,-1]]],38,24,0.290471,-16,1],[[[[4,18,1],[4,18,-1]]],30,46,0.291594,315,1],[[[[14,3,1]],[[14,3,-1]]],28,42,0.2831,618,-1],[[[[4,6,1],[4,6,-1]]],34,36,0.283723,-101,-1],[[[[9,2,1]],[[9,2,-1]]],8,28,0.294207,4,-1],[[[[2,7,1],[2,7,-1]]],26,46,0.286681,-13,-1],[[[[6,6,1],[6,6,-1]]],4,38,0.296008,717,-1],[[[[2,6,1],[2,6,-1]]],34,34,0.294089,23,1],[[[[22,3,1]],[[22,3,-1]],[[22,3,1]]],38,4,0.269627,4719,1]]," +
         "[0.0267451,0.302258,0.327661,0.378851,0.294349,0.398954,0.373873,0.409386,0.41162,0.394894,0.396107,0.416846,0.401898,0.420471,0.41661,0.369163]," +
         "11.0014]";


   // test face
   //const std::string imageFileName = "/mnt/project-disk/src/ObjectRecognition/data/facesTraining/tutorial-haartraining/data/CMU-MIT_Face_Test_Set/newtest/ew-courtney-david.png";

   // test car
   const std::string imageFileName = "/mnt/project-disk/src/ObjectRecognition/data/cars/TheKITTIVision/testing/image_2/000006.png";

   deviceSetup();

   cudaEvent_t start, stop;
   cudaEventCreate(&start);
   cudaEventCreate(&stop);

   Image image;
   Image::fromFile(imageFileName, image);

   std::vector<Classifier::Stage> strongClassifier;
   FeatureTypes featureTypes;
   Classifier::fromResult(strongClassifierStr, strongClassifier, featureTypes);

   std::vector<Classifier::ClassificationResult> results;

   // define all scales for a strong classifier
   std::vector<double> classifierScales;

   // classifierScales.push_back(0.5);
   // classifierScales.push_back(0.75);
   classifierScales.push_back(1.0);
   // classifierScales.push_back(1.1);
   // classifierScales.push_back(1.2);
   // classifierScales.push_back(1.4);
   // classifierScales.push_back(1.6);

   // use the defined scales to detect objects
   for (std::vector<double>::const_iterator classifierScalesIter = classifierScales.begin();
         classifierScalesIter != classifierScales.end();
         ++classifierScalesIter)
   {
      std::vector<Classifier::Stage> scaledStrongClassifier;
      FeatureTypes scaledFeatureTypes;
      Classifier::scaleStrongClassifier(*classifierScalesIter, strongClassifier, featureTypes, scaledStrongClassifier, scaledFeatureTypes);
      scaledFeatureTypes.generateClassifier(1.0, image.getWidth(), image.getHeight(), true);
      Classifier::detectStrongClassifier(scaledStrongClassifier, scaledFeatureTypes, image.getGpuIntegralImage(), results);

   }

   image.displayClassificationResult(results);

	return 0;
}
